import yaml
import pathlib

#####

class Config:
    def __init__(self, path):
        with open(path, "r") as file:
            self._config = yaml.safe_load(file)

        #####

        if "input" in self._config:
            self._input = self._config["input"]
        else:
            self._input = "packages"

        #####

        if "output" in self._config:
            self._output = self._config["output"]
        else:
            self._output = ".github/workflows/autogenerated-builder.yml"

        #####

        if "runs-on" in self._config:
            self._runs_on = self._config["runs-on"]
        else:
            self._runs_on = "ubuntu-latest"

        #####

        if "timeout" in self._config:
            self._timeout = self._config["timeout"]
        else:
            self._timeout = 360

        #####

        if "overrides" in self._config:
            self._overrides = self._config["overrides"]
        else:
            self._overrides = {}

    ##########

    def _get_or_default(self, name, property, default):
        if name in self._overrides:
            if property in self._overrides[name]:
                return self._overrides[name][property]

        #####

        return default

    #####

    def get_input(self):
        return pathlib.Path(self._input)

    #####

    def get_output(self):
        return pathlib.Path(self._output)

    #####

    def is_build(self, name):
        return self._get_or_default(name, "build", True)

    #####

    def runs_on(self, name):
        return self._get_or_default(name, "runs-on", self._runs_on)

    #####

    def timeout(self, name):
        return self._get_or_default(name, "timeout", self._timeout)

    #####

    def pre_build_commands(self, name):
        return self._get_or_default(name, "pre-build-commands", [])

    def post_build_commands(self, name):
        return self._get_or_default(name, "post-build-commands", [])

    #####

    def gpg_keys(self, name):
        return self._get_or_default(name, "gpg", [])
