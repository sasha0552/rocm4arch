#!/usr/bin/env python3

from pathlib import Path
from srcinfo.parse import parse_srcinfo
from yaml import dump

from template.job import job_template
from template.action import action_template

#####

def resolve_package(fpath, info):
    name = fpath.parents[0].name
    path = str(fpath.parents[0])
    altnames = []
    depends = []

    #####

    if "depends" in info:
        depends = depends + info["depends"]

    if "makedepends" in info:
        depends = depends + info["makedepends"]

    #####

    if "provides" in info:
        altnames = altnames + info["provides"]

    #####

    for key, value in info["packages"].items():
        if key != name:
            altnames.append(key)

        #####

        if "depends" in value:
            depends = depends + value["depends"]

        if "makedepends" in value:
            depends = depends + value["makedepends"]

        #####

        if "provides" in value:
            altnames = altnames + value["provides"]

    #####

    return {
        "name": name,
        "path": path,
        "altnames": altnames,
        "depends": depends
    }

def cleanup_packages(packages):
    package_names = []
    real_names = {}

    #####

    for package in packages:
        name = package["name"]
        altnames = package["altnames"]

        #####

        package_names.append(name)

        #####

        for altname in altnames:
            real_names[altname] = name

        #####

        del package["altnames"]

    #####

    for package in packages:
        dependencies = package["depends"]

        for i, dependency in enumerate(dependencies):
            if dependency in real_names:
                dependencies[i] = real_names[dependency]

        #####

        def validDependency(dependency):
            return dependency in package_names

        #####

        package["depends"] = list(
            dict.fromkeys(
                filter(validDependency, dependencies)
            )
        )

    #####

    return packages

def find_packages(path):
    packages = []

    #####

    for fpath in path.rglob(".SRCINFO"):
        with open(fpath, "r") as file:
            content = file.read()

        #####

        (info, errors) = parse_srcinfo(content)

        #####

        if len(errors) != 0:
            print(errors)

        #####

        if len(errors) == 0:
            packages.append(
                resolve_package(fpath, info)
            )

    #####

    return cleanup_packages(packages)

#####

if __name__ == "__main__":
    jobs = {}

    for package in find_packages(Path("packages")):
        jobs[package["name"]] = job_template(package["name"], package["path"], package["depends"], "ubuntu-latest")

    #####

    action = action_template(jobs)

    #####

    with open(".github/workflows/autogenerated-builder.yml", "w") as file:
        file.write(dump(action))
